[
  {
    "id": "78e2f0b5.5a802",
    "type": "tab",
    "label": "BK Controller",
    "disabled": false,
    "info": ""
  },
  {
    "id": "237e62aa.3c31ce",
    "type": "inject",
    "z": "78e2f0b5.5a802",
    "name": "Default BK Target",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "#:(storeInFile)::bk_target",
    "payloadType": "global",
    "x": 210,
    "y": 440,
    "wires": [
      [
        "d65af15e.7a91c",
        "76fa4d08.464e54",
        "fa4e32b5.e36f1"
      ]
    ]
  },
  {
    "id": "d65af15e.7a91c",
    "type": "change",
    "z": "78e2f0b5.5a802",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "#:(storeInFile)::bk_target",
        "pt": "global",
        "to": "payload",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 510,
    "y": 420,
    "wires": [
      []
    ]
  },
  {
    "id": "76fa4d08.464e54",
    "type": "ui_gauge",
    "z": "78e2f0b5.5a802",
    "name": "BK target temp",
    "group": "9d59abb0.326b08",
    "order": 3,
    "width": 3,
    "height": 2,
    "gtype": "gage",
    "title": "",
    "label": "Target Temp",
    "format": "{{value}}c",
    "min": 0,
    "max": "100",
    "colors": [
      "#00b500",
      "#00b500",
      "#ca3838"
    ],
    "seg1": "50",
    "seg2": "78",
    "x": 540,
    "y": 460,
    "wires": []
  },
  {
    "id": "fa4e32b5.e36f1",
    "type": "ui_slider",
    "z": "78e2f0b5.5a802",
    "name": "BK target slider",
    "label": "Target",
    "tooltip": "",
    "group": "9d59abb0.326b08",
    "order": 4,
    "width": 0,
    "height": 0,
    "passthru": true,
    "outs": "end",
    "topic": "",
    "min": "20",
    "max": "100",
    "step": 1,
    "x": 240,
    "y": 500,
    "wires": [
      [
        "ea3830cd.2dda",
        "76fa4d08.464e54",
        "d65af15e.7a91c"
      ]
    ]
  },
  {
    "id": "ea3830cd.2dda",
    "type": "ui_text",
    "z": "78e2f0b5.5a802",
    "group": "e71aa9ca.9bbda8",
    "order": 2,
    "width": 0,
    "height": 0,
    "name": "Kettle target",
    "label": "Target",
    "format": "{{payload | number:1}}°C",
    "layout": "row-spread",
    "x": 550,
    "y": 500,
    "wires": []
  },
  {
    "id": "d4d48589.704b58",
    "type": "inject",
    "z": "78e2f0b5.5a802",
    "name": "Default Element Duty",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "#:(storeInFile)::bk_manual_duty",
    "payloadType": "flow",
    "x": 220,
    "y": 300,
    "wires": [
      [
        "f7bdbd92.aa716",
        "5255e2e3.2740fc"
      ]
    ]
  },
  {
    "id": "f7bdbd92.aa716",
    "type": "ui_slider",
    "z": "78e2f0b5.5a802",
    "name": "Manual duty slider",
    "label": "Manual",
    "tooltip": "",
    "group": "9d59abb0.326b08",
    "order": 5,
    "width": 0,
    "height": 0,
    "passthru": true,
    "outs": "end",
    "topic": "",
    "min": "20",
    "max": "100",
    "step": 1,
    "x": 250,
    "y": 360,
    "wires": [
      [
        "5255e2e3.2740fc"
      ]
    ]
  },
  {
    "id": "5255e2e3.2740fc",
    "type": "change",
    "z": "78e2f0b5.5a802",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "#:(storeInFile)::bk_manual_duty",
        "pt": "flow",
        "to": "payload",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 530,
    "y": 340,
    "wires": [
      []
    ]
  },
  {
    "id": "3857893c.46b1c6",
    "type": "link in",
    "z": "78e2f0b5.5a802",
    "name": "MLT PID temperature input",
    "links": [
      "c5bb895f.256208"
    ],
    "x": 235,
    "y": 140,
    "wires": [
      [
        "b8c055a5.cb5688",
        "2ba42757.3bd328",
        "6bd04cff.4d3574"
      ]
    ]
  },
  {
    "id": "b8c055a5.cb5688",
    "type": "change",
    "z": "78e2f0b5.5a802",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "temp-BK",
        "pt": "global",
        "to": "payload",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 410,
    "y": 140,
    "wires": [
      []
    ]
  },
  {
    "id": "2ba42757.3bd328",
    "type": "switch",
    "z": "78e2f0b5.5a802",
    "name": "bk_on",
    "property": "bk_on",
    "propertyType": "global",
    "rules": [
      {
        "t": "true"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 1,
    "x": 380,
    "y": 200,
    "wires": [
      [
        "4e1d1dbb.a430c4"
      ]
    ]
  },
  {
    "id": "4e1d1dbb.a430c4",
    "type": "switch",
    "z": "78e2f0b5.5a802",
    "name": "bk_pid switch",
    "property": "bk_pid",
    "propertyType": "global",
    "rules": [
      {
        "t": "true"
      },
      {
        "t": "false"
      }
    ],
    "checkall": "false",
    "repair": false,
    "outputs": 2,
    "x": 560,
    "y": 200,
    "wires": [
      [
        "73537e2e.61989"
      ],
      [
        "1161b79c.017bd8"
      ]
    ]
  },
  {
    "id": "73537e2e.61989",
    "type": "function",
    "z": "78e2f0b5.5a802",
    "name": "BK PID Control",
    "func": "// Note that the algorithm provided below assumes a 1 second iteration time\n// Justin Angevaare\n// May 2018\n\n// Set temperature\nmsg.topic = \"PID-BK-main-loop\";\nmsg.target =  flow.get('bk_target', 'storeInFile');\nmsg.temperature =  msg.payload;\nnode.warn('Temp: ' + msg.payload);\n// Well that node doesn't work... do manually\nmsg.interval = 2000\n\n// Calculate error\nmsg.error = flow.get('bk_target', 'storeInFile') - msg.temperature;\n\n// Set output max\nmsg.max_output = 100\n\n// Calculate proportional action\nvar pTerm = msg.error * flow.get('p', 'storeInFile');\n\n// Calculate intergral action\nvar iTerm = 0;\n\nnode.log(pTerm + ' ' + msg.max_output);\n\nif (pTerm < msg.max_output) {\n    // Calculate integrator max\n    msg.integrator_max = msg.max_output/flow.get('i', 'storeInFile');\n    \n    // Update integrator\n    // For purposes of integrator, bound error by [-1, 1]\n    msg.integrator = flow.get('integrator');\n    msg.integrator += (msg.interval/1000) * Math.max(Math.min(msg.error, 1), -1);\n    \n    // Bound total integrator by absolute maximum\n    msg.integrator = Math.max(Math.min(msg.integrator, msg.integrator_max), -msg.integrator_max);\n    \n    // Output updated integrator to flow context\n    flow.set('integrator', msg.integrator);\n    \n    iTerm = msg.integrator * flow.get('i', 'storeInFile');\n}\n\n// Calculate derivative action\nmsg.derivative = (msg.error - flow.get('last_error'))/(msg.interval/1000);\nvar dTerm = msg.derivative * flow.get('d', 'storeInFile');\n\nmsg.output = pTerm + iTerm + dTerm;\nnode.warn(pTerm + ' ' + iTerm + ' ' + dTerm + ' ' + msg.integrator);\n// Bound output by [0, max_output]\nmsg.output = Math.max(Math.min(msg.output, msg.max_output), 0);\n\n// Output updated last_error to flow context\nmsg.last_error = msg.error;\nflow.set('last_error', msg.last_error);\n\n// Set payload to element output\nmsg.payload = msg.output;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 879,
    "y": 180,
    "wires": [
      [
        "b851b80d.5ee1f8",
        "35799339.5e169c"
      ]
    ]
  },
  {
    "id": "1161b79c.017bd8",
    "type": "change",
    "z": "78e2f0b5.5a802",
    "name": "payload = mlt_manual_duty",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "#:(storeInFile)::bk_manual_duty",
        "tot": "flow"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 840,
    "y": 220,
    "wires": [
      [
        "b851b80d.5ee1f8"
      ]
    ]
  },
  {
    "id": "b851b80d.5ee1f8",
    "type": "link out",
    "z": "78e2f0b5.5a802",
    "name": "MLT PID or Manual Duty",
    "links": [
      "3901073e.dc5ad8",
      "8433ff20.b87b7"
    ],
    "x": 1035,
    "y": 200,
    "wires": []
  },
  {
    "id": "35799339.5e169c",
    "type": "link out",
    "z": "78e2f0b5.5a802",
    "name": "MLT PID display",
    "links": [
      "e8739f51.73062",
      "297a459b.f41f0a"
    ],
    "x": 1035,
    "y": 140,
    "wires": []
  },
  {
    "id": "1451a533.df3f8b",
    "type": "inject",
    "z": "78e2f0b5.5a802",
    "name": "Default P",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "43",
    "payloadType": "num",
    "x": 160,
    "y": 580,
    "wires": [
      [
        "10083463.301dbc"
      ]
    ]
  },
  {
    "id": "10083463.301dbc",
    "type": "ui_numeric",
    "z": "78e2f0b5.5a802",
    "name": "",
    "label": "K𝗉",
    "tooltip": "",
    "group": "e71aa9ca.9bbda8",
    "order": 3,
    "width": 4,
    "height": 1,
    "wrap": false,
    "passthru": true,
    "topic": "",
    "format": "{{value | number:1}}",
    "min": 0,
    "max": "99.8",
    "step": "0.1",
    "x": 310,
    "y": 580,
    "wires": [
      [
        "c2dd518d.46a89"
      ]
    ]
  },
  {
    "id": "c2dd518d.46a89",
    "type": "change",
    "z": "78e2f0b5.5a802",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "#:(storeInFile)::p",
        "pt": "flow",
        "to": "payload",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 460,
    "y": 580,
    "wires": [
      []
    ]
  },
  {
    "id": "39875bd7.6b2764",
    "type": "inject",
    "z": "78e2f0b5.5a802",
    "name": "Default I",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "0.15",
    "payloadType": "num",
    "x": 160,
    "y": 620,
    "wires": [
      [
        "6ffd7729.de0428"
      ]
    ]
  },
  {
    "id": "6ffd7729.de0428",
    "type": "ui_numeric",
    "z": "78e2f0b5.5a802",
    "name": "",
    "label": "Ki",
    "tooltip": "",
    "group": "e71aa9ca.9bbda8",
    "order": 5,
    "width": 4,
    "height": 1,
    "wrap": false,
    "passthru": true,
    "topic": "",
    "format": "{{value | number:1}}",
    "min": 0,
    "max": "100",
    "step": "0.1",
    "x": 310,
    "y": 620,
    "wires": [
      [
        "339488cc.a98998"
      ]
    ]
  },
  {
    "id": "339488cc.a98998",
    "type": "change",
    "z": "78e2f0b5.5a802",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "#:(storeInFile)::i",
        "pt": "flow",
        "to": "payload",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 460,
    "y": 620,
    "wires": [
      []
    ]
  },
  {
    "id": "8ff879a7.935878",
    "type": "inject",
    "z": "78e2f0b5.5a802",
    "name": "Default D",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "25",
    "payloadType": "num",
    "x": 160,
    "y": 660,
    "wires": [
      [
        "7f39978.3678768"
      ]
    ]
  },
  {
    "id": "7f39978.3678768",
    "type": "ui_numeric",
    "z": "78e2f0b5.5a802",
    "name": "",
    "label": "Kd",
    "tooltip": "",
    "group": "e71aa9ca.9bbda8",
    "order": 7,
    "width": "4",
    "height": 1,
    "wrap": false,
    "passthru": true,
    "topic": "",
    "format": "{{value | number:1}}",
    "min": 0,
    "max": "100",
    "step": "0.1",
    "x": 310,
    "y": 660,
    "wires": [
      [
        "cafdbc86.2132e"
      ]
    ]
  },
  {
    "id": "cafdbc86.2132e",
    "type": "change",
    "z": "78e2f0b5.5a802",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "#:(storeInFile)::d",
        "pt": "flow",
        "to": "payload",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 460,
    "y": 660,
    "wires": [
      []
    ]
  },
  {
    "id": "60bfcb5c.025064",
    "type": "link in",
    "z": "78e2f0b5.5a802",
    "name": "PID button",
    "links": [
      "5ebb22ba.77a06c"
    ],
    "x": 232,
    "y": 960,
    "wires": [
      [
        "bce0f22d.88c0a"
      ]
    ]
  },
  {
    "id": "bce0f22d.88c0a",
    "type": "change",
    "z": "78e2f0b5.5a802",
    "name": "bk_pid, bk_try = true",
    "rules": [
      {
        "t": "set",
        "p": "bk_pid",
        "pt": "global",
        "to": "true",
        "tot": "bool"
      },
      {
        "t": "set",
        "p": "bk_try",
        "pt": "flow",
        "to": "true",
        "tot": "bool"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 377,
    "y": 960,
    "wires": [
      [
        "24f7d4d6.c64b4c"
      ]
    ]
  },
  {
    "id": "f81a8c48.939be",
    "type": "change",
    "z": "78e2f0b5.5a802",
    "name": "bk_on = bk_try",
    "rules": [
      {
        "t": "set",
        "p": "bk_on",
        "pt": "global",
        "to": "bk_try",
        "tot": "flow"
      },
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "payload",
        "tot": "flow"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 777,
    "y": 920,
    "wires": [
      [
        "b5b00fe2.def77"
      ]
    ]
  },
  {
    "id": "b5b00fe2.def77",
    "type": "switch",
    "z": "78e2f0b5.5a802",
    "name": "bk_on",
    "property": "bk_on",
    "propertyType": "global",
    "rules": [
      {
        "t": "true"
      },
      {
        "t": "false"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 787,
    "y": 1020,
    "wires": [
      [
        "238238dd.2db8d8"
      ],
      [
        "ca1b3eb8.8869e"
      ]
    ]
  },
  {
    "id": "238238dd.2db8d8",
    "type": "change",
    "z": "78e2f0b5.5a802",
    "name": "bk_lock=true",
    "rules": [
      {
        "t": "set",
        "p": "bk_lock",
        "pt": "global",
        "to": "true",
        "tot": "bool"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 1107,
    "y": 1015,
    "wires": [
      []
    ]
  },
  {
    "id": "ca1b3eb8.8869e",
    "type": "delay",
    "z": "78e2f0b5.5a802",
    "name": "",
    "pauseType": "delay",
    "timeout": "3",
    "timeoutUnits": "seconds",
    "rate": "1",
    "nbRateUnits": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 937,
    "y": 1060,
    "wires": [
      [
        "84196cdb.7c231"
      ]
    ]
  },
  {
    "id": "84196cdb.7c231",
    "type": "change",
    "z": "78e2f0b5.5a802",
    "name": "bk_lock = false",
    "rules": [
      {
        "t": "set",
        "p": "bk_lock",
        "pt": "global",
        "to": "false",
        "tot": "bool"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 1117,
    "y": 1100,
    "wires": [
      []
    ]
  },
  {
    "id": "24f7d4d6.c64b4c",
    "type": "link out",
    "z": "78e2f0b5.5a802",
    "name": "BK Try Output",
    "links": [
      "2a6bf115.dfc6ce"
    ],
    "x": 552,
    "y": 960,
    "wires": []
  },
  {
    "id": "2a6bf115.dfc6ce",
    "type": "link in",
    "z": "78e2f0b5.5a802",
    "name": "BK Try Input",
    "links": [
      "24f7d4d6.c64b4c",
      "259ff7ed.c2c6c8",
      "400ab7b1.65a628"
    ],
    "x": 652,
    "y": 920,
    "wires": [
      [
        "f81a8c48.939be",
        "54c3102a.bf3af"
      ]
    ]
  },
  {
    "id": "6d273bd8.04c514",
    "type": "link in",
    "z": "78e2f0b5.5a802",
    "name": "Off button",
    "links": [
      "47be6372.5f661c"
    ],
    "x": 232,
    "y": 881,
    "wires": [
      [
        "becc9684.471f08"
      ]
    ]
  },
  {
    "id": "becc9684.471f08",
    "type": "change",
    "z": "78e2f0b5.5a802",
    "name": "bk_pid, bk_try = false",
    "rules": [
      {
        "t": "set",
        "p": "bk_pid",
        "pt": "global",
        "to": "false",
        "tot": "bool"
      },
      {
        "t": "set",
        "p": "bk_try",
        "pt": "flow",
        "to": "false",
        "tot": "bool"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 377,
    "y": 881,
    "wires": [
      [
        "259ff7ed.c2c6c8"
      ]
    ]
  },
  {
    "id": "259ff7ed.c2c6c8",
    "type": "link out",
    "z": "78e2f0b5.5a802",
    "name": "BK Try Output",
    "links": [
      "2a6bf115.dfc6ce"
    ],
    "x": 552,
    "y": 881,
    "wires": []
  },
  {
    "id": "dbde6681.3eb628",
    "type": "link in",
    "z": "78e2f0b5.5a802",
    "name": "Manual button",
    "links": [
      "a1d6ac13.d6f75"
    ],
    "x": 232,
    "y": 920,
    "wires": [
      [
        "4386457c.4bcfbc"
      ]
    ]
  },
  {
    "id": "4386457c.4bcfbc",
    "type": "change",
    "z": "78e2f0b5.5a802",
    "name": "bk_pid = false, bk_try = true",
    "rules": [
      {
        "t": "set",
        "p": "bk_pid",
        "pt": "global",
        "to": "false",
        "tot": "bool"
      },
      {
        "t": "set",
        "p": "bk_try",
        "pt": "flow",
        "to": "true",
        "tot": "bool"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 397,
    "y": 920,
    "wires": [
      [
        "400ab7b1.65a628"
      ]
    ]
  },
  {
    "id": "400ab7b1.65a628",
    "type": "link out",
    "z": "78e2f0b5.5a802",
    "name": "BK Try Output",
    "links": [
      "2a6bf115.dfc6ce"
    ],
    "x": 552,
    "y": 920,
    "wires": []
  },
  {
    "id": "e75b51c9.c7ea5",
    "type": "link in",
    "z": "78e2f0b5.5a802",
    "name": "Manual button",
    "links": [
      "a1d6ac13.d6f75"
    ],
    "x": 232,
    "y": 1000,
    "wires": [
      [
        "1e1edf73.80b651"
      ]
    ]
  },
  {
    "id": "1e1edf73.80b651",
    "type": "change",
    "z": "78e2f0b5.5a802",
    "name": "Zero everything",
    "rules": [
      {
        "t": "set",
        "p": "last_error",
        "pt": "msg",
        "to": "0.0",
        "tot": "num"
      },
      {
        "t": "set",
        "p": "integrator",
        "pt": "msg",
        "to": "0.0",
        "tot": "num"
      },
      {
        "t": "set",
        "p": "derivative",
        "pt": "msg",
        "to": "0.0",
        "tot": "num"
      },
      {
        "t": "set",
        "p": "last_error",
        "pt": "flow",
        "to": "last_error",
        "tot": "msg"
      },
      {
        "t": "set",
        "p": "integrator",
        "pt": "flow",
        "to": "integrator",
        "tot": "msg"
      },
      {
        "t": "set",
        "p": "output",
        "pt": "msg",
        "to": "0.0",
        "tot": "num"
      },
      {
        "t": "set",
        "p": "target",
        "pt": "msg",
        "to": "target",
        "tot": "flow"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 357,
    "y": 1040,
    "wires": [
      [
        "ef9de62d.c08a78"
      ]
    ]
  },
  {
    "id": "ef9de62d.c08a78",
    "type": "link out",
    "z": "78e2f0b5.5a802",
    "name": "BK PID display",
    "links": [
      "297a459b.f41f0a"
    ],
    "x": 522,
    "y": 1040,
    "wires": []
  },
  {
    "id": "b875aa94.3560b8",
    "type": "link in",
    "z": "78e2f0b5.5a802",
    "name": "Off Button",
    "links": [
      "47be6372.5f661c",
      "777c3f1f.083ee"
    ],
    "x": 232,
    "y": 1040,
    "wires": [
      [
        "1e1edf73.80b651"
      ]
    ]
  },
  {
    "id": "40363430.7c705c",
    "type": "inject",
    "z": "78e2f0b5.5a802",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 180,
    "y": 720,
    "wires": [
      [
        "777c3f1f.083ee"
      ]
    ]
  },
  {
    "id": "777c3f1f.083ee",
    "type": "link out",
    "z": "78e2f0b5.5a802",
    "name": "Off button - initialization",
    "links": [
      "cca3fbf8.0732f8",
      "b875aa94.3560b8",
      "436a459d.45dfec"
    ],
    "x": 275,
    "y": 720,
    "wires": []
  },
  {
    "id": "cca3fbf8.0732f8",
    "type": "link in",
    "z": "78e2f0b5.5a802",
    "name": "Off button - initialization",
    "links": [
      "777c3f1f.083ee"
    ],
    "x": 232,
    "y": 840,
    "wires": [
      [
        "418d5df5.63fc24"
      ]
    ]
  },
  {
    "id": "418d5df5.63fc24",
    "type": "change",
    "z": "78e2f0b5.5a802",
    "name": "bk_lock, bk_on, bk_pid, bk_try = false",
    "rules": [
      {
        "t": "set",
        "p": "bk_lock",
        "pt": "global",
        "to": "false",
        "tot": "bool"
      },
      {
        "t": "set",
        "p": "bk_on",
        "pt": "global",
        "to": "false",
        "tot": "bool"
      },
      {
        "t": "set",
        "p": "bk_pid",
        "pt": "global",
        "to": "false",
        "tot": "bool"
      },
      {
        "t": "set",
        "p": "bk_try",
        "pt": "global",
        "to": "false",
        "tot": "bool"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 427,
    "y": 840,
    "wires": [
      []
    ]
  },
  {
    "id": "436a459d.45dfec",
    "type": "link in",
    "z": "78e2f0b5.5a802",
    "name": "Off button",
    "links": [
      "47be6372.5f661c",
      "777c3f1f.083ee"
    ],
    "x": 232,
    "y": 1140,
    "wires": [
      [
        "5d48f2c0.028e6c"
      ]
    ]
  },
  {
    "id": "5d48f2c0.028e6c",
    "type": "change",
    "z": "78e2f0b5.5a802",
    "name": "payload = 0",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "0",
        "tot": "num"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 357,
    "y": 1140,
    "wires": [
      [
        "ca49e1a9.0c693"
      ]
    ]
  },
  {
    "id": "ca49e1a9.0c693",
    "type": "link out",
    "z": "78e2f0b5.5a802",
    "name": "BK Off Duty",
    "links": [
      "3901073e.dc5ad8",
      "8433ff20.b87b7"
    ],
    "x": 532,
    "y": 1140,
    "wires": []
  },
  {
    "id": "54c3102a.bf3af",
    "type": "debug",
    "z": "78e2f0b5.5a802",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 770,
    "y": 860,
    "wires": []
  },
  {
    "id": "dc4b7dd5.2fdcc",
    "type": "ui_ui_control",
    "z": "78e2f0b5.5a802",
    "name": "",
    "events": "all",
    "x": 810,
    "y": 480,
    "wires": [
      []
    ]
  },
  {
    "id": "6bd04cff.4d3574",
    "type": "function",
    "z": "78e2f0b5.5a802",
    "name": "Send values to chart",
    "func": "\nvar entryDate = new Date();\n\nvar temp_msg = {};\ntemp_msg.topic = \"Temp\";\ntemp_msg.payload = {x: entryDate, y: parseFloat(global.get(\"temp-BK\").toFixed(1))};\n\nvar target_msg = {};\ntarget_msg.topic = \"Target\";\ntarget_msg.payload = {x: entryDate, y: global.get(\"bk_target\", \"storeInFile\")};\n\nreturn [[target_msg, temp_msg]];",
    "outputs": 2,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 420,
    "y": 80,
    "wires": [
      [
        "c9472002.7fc0f",
        "b2783e22.2b8f"
      ],
      [
        "c9472002.7fc0f",
        "b2783e22.2b8f"
      ]
    ]
  },
  {
    "id": "c9472002.7fc0f",
    "type": "ui_template",
    "z": "78e2f0b5.5a802",
    "group": "9d59abb0.326b08",
    "name": "BK chart.js",
    "order": 6,
    "width": "6",
    "height": "4",
    "format": "<!--\nA node-red Dashboard UI template to draw charts using chart.js\nBefore use download the file Chart.bundle.min.js from chartjs.org and \nsave in an appropriate folder (e.g. .node-red/static). \nIn settings.js set httpStatic to the full path of that folder and restart node-red.\nMake sure that the options for 'Pass through messages' and 'Add output messages' \nin this node are cleared.\nFor basic use set the id and size you want in the canvas tag and set chartID to the id\nSetup chartDef as required for your chart (see the chart.js docs)\nIn addition, for each dataset specify in chartDef the message topic that you will use for that channel.\nTo (optionally) provide the chart with a one-off set of data send the node a message with:\nmsg.action = \"load\"\nmsg.payload = [\n{topic: \"mytopic1\", data: [{x: x1,y:y2},{x:x2,y:y2},...]},\n{topic: \"mytopic2\", data: [{x: x1,y:y2},{x:x2,y:y2},...]},\n...]\nWhere mytopic1 and mytopic2 are the the topics specified in the chartDef\n\nTo provide the chart with data incrementally (for a time series for example)\nsend it messages of the form\n{topic: \"mytopic1\", payload: {x:xvalue,y:yvalue}}\nThe chart will be updated as each sample is provided.\nTo limit the growth of the chart set chartMaxPoints and/or chartTimeSpan in the Chart Helper node\nas described at the head of that node.\nIf you find that chart seems to flicker and scroll bars come and go then try \nsetting a size other than auto in the Size specification for this node.\n\nFor Bar charts the x value is the label for the bar and the y value is the bar value\n\nNote that since the chart samples are stored in the browser then the chart will be cleared each\ntime the browser is refreshed (and will be clear on initially opening the view). In order to \nprovided persistency over browser opening and refresh this node may be used in conjunction with\nthe Chart Helper function node.  Details for its use are in the source of that node.\n\nIf your flow includes more that one instance of this script then the line fetching \nChart.bundle.min.js need only be included in one of them\n-->\n<script src=\"/Chart.bundle.min.js\"></script>\n<canvas id=\"BKChart\" width=\"300\" height=\"200\"></canvas>\n<script>\n(function() {\n    var chartID = \"BKChart\";           // set this to the id you have specified in the canvas tag above\n    // setup the chart definition as defined in the chart.js documentation, in addition setting up the topic\n    // for each channel\n    var chartDef = {\n        type: 'line',\n        data: {\n            datasets: [{\n                topic: \"Target\",    // used here not by chart.js\n                label: \"Target\",\n                yAxisID: \"1\",\n                fill: false,\n                lineTension: 0,\n                borderColor: \"#0000ff\",\n                pointRadius: 0,\n                pointBorderColor: \"#0000ff\",\n                pointBackgroundColor: \"#0000ff\",\n                backgroundColor:  \"#0000ff\",\n                borderWidth: 1,\n                data: []  // data is written here later\n            }, {\n                topic: \"Temp\",    // used here not by chart.js\n                label: \"Temp\",\n                yAxisID: \"2\",\n                fill: false,\n                lineTension: 0,\n                borderColor: \"#ff0000\",\n                pointRadius: 0,\n                pointBorderColor: \"#ff0000\",\n                pointBackgroundColor: \"#ff0000\",\n                backgroundColor:  \"#ff0000\",\n                borderWidth: 1,\n                data: []  // data is written here later\n            }]\n        },\n        options: {\n            scales: {\n                xAxes: [{\n                    type: 'time',\n                    time: {\n                        unit: 'minute',\n                        unitStepSize: 1,\n                        displayFormats: {\n                            minute: 'HH:mm'\n                        }\n                    },\n                    ticks: {\n                        autoSkip: true,\n                        maxTicksLimit: 3,\n                        maxRotation: 0,\n                        minRotation: 0\n                    }\n                }],\n                yAxes: [{\n                    id: \"1\",\n                    ticks: {\n                        min: 0,\n                        max: 80,\n                        stepSize: 5\n                    }\n                }, {\n                    id: \"2\",\n                    display: false,\n                    ticks: {\n                        min: 0,\n                        max: 80,\n                        stepSize: 5\n                    }\n                }]\n            },\n            animation: {\n                duration: 0\n            }\n        }\n    }\n        \n/***** You shouldn't normally need to change anything below here *****/    \n    var myChart = null;\n    var loaded = false;     // indicates whether we have already had a load action\n    var chartTimeSpan;\n    var chartMaxPoints;\n\n    function doChart(msg, scope) {\n        if (!myChart) {\n            // chart does not exist so load the data and create it\n            var ctx = document.getElementById(chartID);\n            myChart = new Chart(ctx, chartDef);     \n        }\n        // chart already exists, update it\n        var datasets = myChart.data.datasets;\n        // is this a load or preload action?\n        if (msg.action === \"load\" || msg.action === \"preload\") {\n            // yes, do not allow preload if we have already had a load\n            // so do it if this is a load or we have not previously had a load\n            if (msg.action === \"load\" || !loaded) {\n                // pick up chartTimeSpan and chartMaxPoints if they have been provided\n                if (typeof msg.chartTimeSpan != 'undefined') {\n                    chartTimeSpan = msg.chartTimeSpan;\n                }\n                if (typeof msg.chartMaxPoints != 'undefined') {\n                    chartMaxPoints = msg.chartMaxPoints;\n                }\n                    \n                // replace existing data for matching topics\n                for (var j = 0; j < msg.payload.length; j++) {\n                    var topic = msg.payload[j].topic;\n                    // find it in the chart\n                    for (var i = 0; i < datasets.length; i++) {\n                        if (datasets[i].topic == topic) {\n                            // if stripping old samples by time is required then ensure the x value is Date\n                            if (chartTimeSpan > 0 ) {\n                                var data = msg.payload[j].data;\n                                for (var k = 0; k < data.length; k++) {\n                                    if (typeof data[k].x === \"string\") {\n                                        data[k].x = new Date(data[k].x);\n                                    }\n                                }\n                            }\n                            if (chartDef.type !== \"bar\") {\n                                datasets[i].data = msg.payload[j].data;\n                            } else {\n                                // bar chart so x values must go to labels and y values to dataset\n                                datasets[i].data = [];\n                                myChart.data.labels = [];\n                                var data = msg.payload[j].data;\n                                for (var k = 0; k < data.length; k++) {\n                                    datasets[i].data.push(data[k].y);\n                                    myChart.data.labels.push(data[k].x);\n                                }\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n            if (msg.action === \"load\") loaded = true;\n            myChart.update();\n        } else {\n            // does the topic match one of the datasets?\n            for (var i = 0; i < datasets.length; i++) {\n                if (datasets[i].topic == msg.topic) {\n                    // if stripping old samples by time is required then ensure the x value is Date\n                    if (chartTimeSpan > 0 && typeof msg.payload.x === \"string\") {\n                        msg.payload.x = new Date(msg.payload.x);\n                    }\n                    if (chartDef.type !== \"bar\") {\n                        datasets[i].data.push(msg.payload);\n                    } else {\n                         // bar chart so x value must go to labels and y value to dataset\n                        datasets[i].data.push(msg.payload.y);\n                        myChart.data.labels.push(msg.payload.x);\n                    }\n                    myChart.update();\n                    break;\n                }\n            }\n        }\n        // strip off samples older than now\n        // charTimeSpan == 0 implies don't do it\n        var shifted = false;\n        if (chartTimeSpan > 0) {\n            var now = new Date();\n            var oldestTimeAllowed = now - chartTimeSpan;\n            for (var i = 0; i < datasets.length; i++) {\n                dataset = datasets[i];\n                while(dataset.data[0] && getTime(dataset.data[0].x) < oldestTimeAllowed) {\n                    dataset.data.shift();\n                    shifted = true;\n                }\n            }\n        }\n        // strip samples off the front if there are now too many\n        // charTimeSpan == 0 implies don't do it\n        if (chartMaxPoints > 0) {\n            for (var i = 0; i < datasets.length; i++) {\n                dataset = datasets[i];\n                while(dataset.data.length > chartMaxPoints) {\n                    dataset.data.shift();\n                    shifted = true;\n                }\n            }\n        }\n        if (shifted) {\n            myChart.update();\n        }\n        \n        var maxValue = getMax(myChart);\n        myChart.options.scales.yAxes[0].ticks.max = maxValue + 10;\n        myChart.options.scales.yAxes[1].ticks.max = maxValue + 10;\n        \n        var minValue = getMin(myChart);\n        myChart.options.scales.yAxes[0].ticks.min = minValue - 10;\n        myChart.options.scales.yAxes[1].ticks.min = minValue - 10;\n    };\n\n    var getMax = function(chart) {\n        datasets = chart.data.datasets;\n        var maxValue = 0;\n        for(var i=0; i<datasets.length; i++) {\n            dataset=datasets[i]\n            if(chart.data.datasets[i].hidden) {\n                continue;\n            }\n            dataset.data.forEach(function(d) {\n                if(typeof(d.y)==\"number\" && d.y > maxValue) {\n                    maxValue = d.y\n                }\n            })\n        }\n        return parseInt(maxValue);\n    }\n\n    var getMin = function(chart) {\n        datasets = chart.data.datasets;\n        var minValue = 1000;\n        for(var i=0; i<datasets.length; i++) {\n            dataset=datasets[i]\n            if(chart.data.datasets[i].hidden) {\n                continue;\n            }\n            dataset.data.forEach(function(d) {\n                if(typeof(d.y)==\"number\" && d.y < minValue) {\n                    minValue = d.y\n                }\n            })\n        }\n        return parseInt(minValue);\n    }\n\n    // gets the time of an x value, works for strings or Date types\n    function getTime(x) {\n        if (typeof x === \"string\") x = new Date(x);\n        return x.getTime();\n    }\n    \n    // builds the preload message for sending back to the chart helper\n    function preloadMsg() {\n        var preMsg = {action: \"preload\", payload: \"preload\"};\n        // build array of topics in chart\n        var topics = [];\n        for (var i=0; i<chartDef.data.datasets.length; i++) {\n            topics.push(chartDef.data.datasets[i].topic);\n        }\n        preMsg.topics = topics;\n        // has the chart already been created\n        if (myChart) {\n            preMsg.lastXValue = 1;\n        } else {\n            preMsg.lastXValue = 0;\n        }\n        return preMsg;\n    }\n\n    (function(scope) {\n        // this code gets run when the a view is opened on the node in the browser\n        // send a preload message back to node red to ask it send\n        // us a complete set of data. Pass down max points and time span to the helper node for it to use\n        // plus an array of the topics of interest\n        scope.send( preloadMsg() );\n        \n        scope.$watch('msg', function(msg) {\n            if (msg) {\n                doChart(msg, scope);\n            }\n        });\n    })(scope);\n})();\n</script>\n",
    "storeOutMessages": false,
    "fwdInMessages": false,
    "resendOnRefresh": false,
    "templateScope": "local",
    "x": 730,
    "y": 40,
    "wires": [
      [
        "b2783e22.2b8f"
      ]
    ]
  },
  {
    "id": "b2783e22.2b8f",
    "type": "function",
    "z": "78e2f0b5.5a802",
    "name": "BKChart Helper",
    "func": "// A helper for the node-red chart.js template node\n// see the template node for the majority of the user defined data\n// here all that is needed is to setup values to limit the length of the chart\n// Firstly chartMaxPoints may be set non-zero and (for each channel) when the number\n// of points exceeds this value then the oldest samples will be discarded.\n// Alternatively (or in addition) if the x axis is time based then chartTimeSpan (milliseconds)\n// may be set and then old samples will be discarded to limit the chart to this time span.\n\nvar chartMaxPoints = 0;             //max no points in a chart before they drop off the left. Set to zero to disable\nvar chartTimeSpan = 60*60*1000;     //chart time span 4 mins. Set to zero to disable\n\n// ----------------------------------------------------------\n// You should not need to change anything below here\n\n// with inputs connected to the same nodes as a chart.js node this maintains a chart history\n// for preloading into the chart when it is opened in the browser\n\nvar topicsOfinterest = context.get('topicsOfInterest');    // can't use null here\nif (typeof topicsOfInterest == 'undefined') topicsOfInterest = null;\n\nvar msg2 = null;\nvar datasets = context.get('datasets') || [];\n// each dataset maps to a channel on the chart and consists of a hash with fields\n// topic: the topic name of the channel\n// data: an array of data points {x: x_value, y: y_value}\n// If msg.action == \"preload\" then the topic and payload are ignored and a message is passed\n// on containing the current chart data and msg.action still set to preload\n\nif (msg.action === \"preload\") {\n    // we should have been passed the topics of interest\n    topicsOfInterest = msg.topics;      // null if not provided\n    context.set('topicsOfInterest', topicsOfInterest);\n    // send a message containing the current chart data time range values, leave rest of msg as is\n    msg.payload = datasets;\n    msg.chartMaxPoints = chartMaxPoints;\n    msg.chartTimeSpan = chartTimeSpan;\n} else if (msg.action === \"restore\") {\n    // restoring from persistent memory\n    // step through the given datasets, if any\n    if (Array.isArray(msg.payload)) {\n        for (var i = 0; i < msg.payload.length; i++) {\n            topic = msg.payload[i].topic;\n            // find the matching topic\n            var found = false;\n            for (var k = 0; k < datasets.length; k++) {\n                if (datasets[k].topic == topic) {\n                    // insert the data in front of any that has been acquired since startup\n                    datasets[k].data = msg.payload[i].data.concat(datasets[k].data);\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                // new topic so make a new dataset and fill it\n                datasets.push({topic: topic, data: msg.payload[i].data});\n            }\n        }\n    }\n    // remember that we have restored in order to enable future writes to persistent store\n    context.set(\"restored\", true);\n    // send a preload action to the chart\n    msg.action = \"preload\";\n    msg.payload = datasets;\n} else if (msg.action === \"load\") {\n    // replace existing data for matching topics\n    for (var j = 0; j < msg.payload.length; j++) {\n        var topic = msg.payload[j].topic;\n        // find it in the chart\n        found = false;\n        for (i = 0; i < datasets.length; i++) {\n            if (datasets[i].topic == topic) {\n                datasets[i].data = msg.payload[j].data;\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            // new topic so make a new dataset and fill it\n            datasets.push({topic: topic, data: msg.payload[j].data});\n        }\n    }\n    msg = null;         // don't send anything on\n} else {\n    // check whether the topic is one we are interested in\n    if (topicsOfInterest === null  || topicsOfInterest.indexOf(msg.topic) >= 0) {\n        found = false;\n        // find the right dataset if it already exists\n        for (i = 0; i < datasets.length; i++) {\n            dataset = datasets[i];\n            if (dataset.topic == msg.topic) {\n                found = true;\n                dataset.data.push(msg.payload);\n                break;\n            }\n        }\n        if (!found) {\n            // new topic so make a new dataset\n            datasets.push({topic: msg.topic, data: [msg.payload]});\n        }\n    } else {\n        // ignore topics that are not of interest\n    }\n    // do not pass on a message to o/p 1, send the datasets to o/p 2 for persistent\n    // storage if required and we have been given data on startup\n    // this is to prevent the persistent store being overwritten before it has been read\n    msg = null;\n    if (context.get(\"restored\")) {\n        msg2 = {payload: datasets};\n    }\n}\n    \n// remove any points that are too old\nif (chartTimeSpan > 0) {\n    var now = new Date();\n    var oldestTimeAllowed = new Date();\n    oldestTimeAllowed.setTime(now.getTime() - (chartTimeSpan));\n    for (i = 0; i < datasets.length; i++) {\n        var data = datasets[i].data;\n        while (data.length > 0 ) {\n            // convert the x value (in place) to a Date if it is a string\n            if (typeof data[0].x === \"string\") {\n                data[0].x = new Date(data[0].x);\n            }            \n            if (data[0].x < oldestTimeAllowed) {\n                data.shift();\n            } else {\n                break;\n            }\n        }\n    }\n}\n// strip samples off the front if there are now too many\n// charTimeSpan == 0 implies don't do it\nif (chartMaxPoints > 0) {\n    var shifted = false;\n    for (i = 0; i < datasets.length; i++) {\n        data = datasets[i].data;\n        while(data.length > chartMaxPoints) {\n            data.shift();\n        }\n    }\n}\ncontext.set('datasets', datasets);\nreturn [msg,msg2];\n\n",
    "outputs": "2",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 740,
    "y": 120,
    "wires": [
      [
        "c9472002.7fc0f"
      ],
      []
    ]
  }
]